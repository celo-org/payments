#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const child_process = require("child_process");

const VERSIONS = ["major", "minor", "patch"];

/**
 * What does this script do? Conform to our
 * system and deploy all packages at once.
 *
 * Given a structure as follows
 *
 *  A, B, C are deployed as 0.0.1
 *
 * - A 0.0.1-dev
 *   - B 0.0.1-dev
 *   - C 0.0.1-dev
 * - B 0.0.1-dev
 *   - B 0.0.1-dev
 * - C 0.0.1-dev
 *
 * A patch deploy (./scripts/deploy patch) would
 * - For each package
 * - Update the dependencies to 0.0.2
 * - Update the package version to 0.0.2
 * - Publish 0.0.2
 * - Update the dependencies to 0.0.2-dev
 * - Update the version to 0.0.2-dev
 *
 * A minor deploy (./scripts/deploy minor) would
 * - For each package
 * - Update the dependencies to 0.1.0
 * - Update the package version to 0.1.0
 * - Publish 0.1.0
 * - Update the dependencies to 0.1.0-dev
 * - Update the version to 0.1.0-dev
 */

const versionCommand = process.argv[2];
const dryRun = !process.argv.includes("--publish");

if (!VERSIONS.includes(versionCommand)) {
  console.log("invalid command, please use one of", VERSIONS.join(", "));
  process.exit(1);
}

const rootFolder = path.join(__dirname, "..");
const packagesFolder = path.join(__dirname, "..", "packages");
const folders = fs.readdirSync(packagesFolder);

const packages = folders.map((folder) => {
  return JSON.parse(
    fs
      .readFileSync(path.join(packagesFolder, folder, "package.json"))
      .toString()
  );
});

function incrementVersion(version, command) {
  const index = VERSIONS.indexOf(command);
  return version
    .split(".")
    .map((v, i) => (i === index ? parseInt(v) + 1 : i > index ? 0 : v))
    .join(".");
}

function removeDevSuffix(version) {
  return version.endsWith("-dev")
    ? version.slice(0, version.indexOf("-dev"))
    : version;
}

function addDevSuffix(version) {
  return version.endsWith("-dev") ? version : `${version}-dev`;
}

function readPackageJson(folder) {
  return JSON.parse(
    fs
      .readFileSync(path.join(packagesFolder, folder, "package.json"))
      .toString()
  );
}

function writePackageJson(folder, properties) {
  const packageJson = readPackageJson(folder);
  fs.writeFileSync(
    path.join(packagesFolder, folder, "package.json"),
    JSON.stringify(
      {
        ...packageJson,
        ...properties,
      },
      null,
      2
    )
  );
}

function updateDependencies(folder, version) {
  const packageJson = readPackageJson(folder);

  const dependencies = Object.keys(packageJson.dependencies).reduce(
    (accum, packageName) => {
      return {
        ...accum,
        [packageName]: packageName.startsWith("@celo/payments-")
          ? version
          : packageJson.dependencies[packageName],
      };
    },
    {}
  );

  writePackageJson(folder, { dependencies });
}

const oldVersion = packages[0].version;
const newVersion = incrementVersion(
  removeDevSuffix(oldVersion),
  versionCommand
);

console.log("@celo/payments", oldVersion, "=>", newVersion);

folders.forEach((folder) => {
  writePackageJson(folder, { version: newVersion });
  updateDependencies(folder, newVersion);
});

child_process.execSync("yarn", { cwd: rootFolder });
child_process.execSync("yarn build", { cwd: rootFolder });

if (!dryRun) {
  folders.forEach((folder) => {
    child_process.execSync("npm publish --access public", {
      cwd: path.join(packagesFolder, folder),
      stdio: "inherit",
    });
  });
}

folders.forEach((folder) => {
  writePackageJson(folder, { version: addDevSuffix(newVersion) });
  updateDependencies(folder, addDevSuffix(newVersion));
});

if (dryRun) {
  // roll back everything
  folders.forEach((folder) => {
    writePackageJson(folder, { version: oldVersion });
    updateDependencies(folder, oldVersion);
  });
  console.log("Publish dry run exited successfully!");
  console.log("Use --publish to actually deploy");
}
